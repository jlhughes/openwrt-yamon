#! /usr/bin/awk -f

function usage(ex) {
  print "nvram [get name] [set name=value] [unset name] [show]"
  exit ex
}

function validname(n) {
  if (n ~ /^[-_a-zA-Z0-9]+$/)
    return 1
  return 0
}

function nvram_read(f, nvram,   i) {
  while (getline < f == 1) {
    nvram[$1] = $2
    for (i = 3; i <= NF; ++i)
      nvram[$1] = nvram[$1] "=" $i
  }
  # busybox awk segfaults when closing non-open file
  if (i)
    close(f)
  return
}

function nvram_write(f, nvram,   k) {
  for (k in nvram)
    print k "=" nvram[k] > f
  # busybox awk segfaults when closing non-open file
  if (length(k))
    close(f)
  return
}

BEGIN {

  FS = "="
  NVRAM = "/tmp/nvram"
  NVRAMPERM = "/etc/nvram"
  maxsize = 64 * 1024

  if (ARGC <= 1)
    usage(0)

  if (getline < NVRAM < 0) {
    nvram_read(NVRAMPERM, nvram)
  } else {
    close(NVRAM)
    nvram_read(NVRAM, nvram)
  }

  update=0
  commit=0

  for (i = 1; i < ARGC; ++i) {
    cmd = ARGV[i]

    if (cmd == "get") {
      nr = split(ARGV[++i], args)
      if (nr != 1 || !validname(args[1]))
        usage(1)
      if (args[1] in nvram)
        print nvram[args[1]]

    } else if (cmd == "set") {
      nr = split(ARGV[++i], args)
      if (nr < 1 || !validname(args[1]))
        usage(1)
      for (j in args) if (j > 2) args[2] = args[2] "=" args[j]
      nvram[args[1]] = args[2]
      update=1

    } else if (cmd == "unset") {
      nr = split(ARGV[++i], args)
      if (nr != 1 || !validname(args[1]))
        usage(1)
      delete nvram[args[1]]
      update=1

    } else if (cmd == "show" || cmd == "getall") {
      size=0
      for (k in nvram) {
        print k "=" nvram[k]
        size += length(k) + length(nvram[k]) + 2
      }
      print "size: " size " (left: " (maxsize-size) ")"

    } else if (cmd == "commit") {
      commit=1

    } else {
      print "unknown cmd " cmd
      usage(1)
    }
  }

  if (update)
    nvram_write(NVRAM, nvram)
  if (commit)
    nvram_write(NVRAMPERM, nvram)

  exit 0
}

